class DelegatingLogger{constructor(provider){if(this.provider=provider,!this.provider)throw new Error("provider is required")}setLevel(level){this.provider.setLevel(level)}log(level,message,meta){this.provider.log(message,meta)}debug(message,meta){this.provider.debug(message,meta)}verbose(message,meta){this.provider.verbose(message,meta)}info(message,meta){this.provider.info(message,meta)}warn(message,meta){this.provider.warn(message,meta)}error(message,meta){this.provider.error(message,meta)}fatal(message,meta){this.provider.fatal(message,meta)}isLevelEnabled(level){return this.provider.isLevelEnabled(level)}isFatalEnabled(){return this.provider.isFatalEnabled()}isErrorEnabled(){return this.provider.isErrorEnabled()}isWarnEnabled(){return this.provider.isWarnEnabled()}isInfoEnabled(){return this.provider.isInfoEnabled()}isDebugEnabled(){return this.provider.isDebugEnabled()}isVerboseEnabled(){return this.provider.isVerboseEnabled()}}var LoggerLevel={ENUMS:{fatal:0,error:1,warn:2,info:3,verbose:4,debug:5},DEBUG:"debug",VERBOSE:"verbose",INFO:"info",WARN:"warn",ERROR:"error",FATAL:"fatal"};class Logger{static DEFAULT_CATEGORY="ROOT";constructor(category,level,levels){this.category=category||Logger.DEFAULT_CATEGORY,this.levels=levels||LoggerLevel.ENUMS,this.level=this.levels[level||LoggerLevel.INFO]}setLevel(level){this.level=this.levels[level||LoggerLevel.INFO]}isLevelEnabled(level){return this.levels[level]<=this.level}isFatalEnabled(){return this.isLevelEnabled(LoggerLevel.FATAL)}isErrorEnabled(){return this.isLevelEnabled(LoggerLevel.ERROR)}isWarnEnabled(){return this.isLevelEnabled(LoggerLevel.WARN)}isInfoEnabled(){return this.isLevelEnabled(LoggerLevel.INFO)}isDebugEnabled(){return this.isLevelEnabled(LoggerLevel.DEBUG)}isVerboseEnabled(){return this.isLevelEnabled(LoggerLevel.VERBOSE)}}class ConfigurableLogger extends DelegatingLogger{static DEFAULT_CONFIG_PATH="logging.level";constructor(config,provider,category,configPath,cache){if(super(provider),this.config=config,!this.config)throw new Error("config is required");if(this.category=category||Logger.DEFAULT_CATEGORY,this.configPath=configPath||ConfigurableLogger.DEFAULT_CONFIG_PATH,this.cache=cache,!this.cache)throw new Error("cache is required");this.provider.setLevel(ConfigurableLogger.getLoggerLevel(this.category,this.configPath,this.config,this.cache)),ConfigurableLogger.prototype.setLevel=DelegatingLogger.prototype.setLevel,ConfigurableLogger.prototype.log=DelegatingLogger.prototype.log,ConfigurableLogger.prototype.debug=DelegatingLogger.prototype.debug,ConfigurableLogger.prototype.verbose=DelegatingLogger.prototype.verbose,ConfigurableLogger.prototype.info=DelegatingLogger.prototype.info,ConfigurableLogger.prototype.warn=DelegatingLogger.prototype.warn,ConfigurableLogger.prototype.error=DelegatingLogger.prototype.error,ConfigurableLogger.prototype.fatal=DelegatingLogger.prototype.fatal,ConfigurableLogger.prototype.isLevelEnabled=DelegatingLogger.prototype.isLevelEnabled,ConfigurableLogger.prototype.isDebugEnabled=DelegatingLogger.prototype.isDebugEnabled,ConfigurableLogger.prototype.isVerboseEnabled=DelegatingLogger.prototype.isVerboseEnabled,ConfigurableLogger.prototype.isInfoEnabled=DelegatingLogger.prototype.isInfoEnabled,ConfigurableLogger.prototype.isWarnEnabled=DelegatingLogger.prototype.isWarnEnabled,ConfigurableLogger.prototype.isErrorEnabled=DelegatingLogger.prototype.isErrorEnabled,ConfigurableLogger.prototype.isFatalEnabled=DelegatingLogger.prototype.isFatalEnabled}static getLoggerLevel(category,configPath,config,cache){let level="info";const path=configPath||ConfigurableLogger.DEFAULT_CONFIG_PATH,categories=(category||"").split("/");let pathStep=path;const root=`${pathStep}./`;cache.get(root)?level=cache.get(root):config.has(root)&&(level=config.get(root),cache.put(root,level));for(let i=0;i<categories.length;i++)pathStep=`${pathStep}${0===i?".":"/"}${categories[i]}`,cache.get(pathStep)?level=cache.get(pathStep):config.has(pathStep)&&(level=config.get(pathStep),cache.put(pathStep,level));return level}}class JSONFormatter{static getTag(value){return null==value?void 0===value?"[object Undefined]":"[object Null]":toString.call(value)}static isObjectLike(value){return"object"==typeof value&&null!==value}static isPlainObject(value){if(!JSONFormatter.isObjectLike(value)||"[object Object]"!==JSONFormatter.getTag(value))return!1;if(null===Object.getPrototypeOf(value))return!0;let proto=value;for(;null!==Object.getPrototypeOf(proto);)proto=Object.getPrototypeOf(proto);return Object.getPrototypeOf(value)===proto}format(timestamp,category,level,message,meta){return JSON.stringify({level:level,message:message,timestamp:timestamp,category:category,...JSONFormatter.isPlainObject(meta)?meta:{meta:meta}})}}class ConsoleLogger extends Logger{constructor(category,level,levels,meta,formatter,consoleArg){super(category,level,levels),this.formatter=formatter||new JSONFormatter,this.meta=meta||{},this.console=consoleArg||console,ConsoleLogger.prototype.setLevel=Logger.prototype.setLevel,ConsoleLogger.prototype.isLevelEnabled=Logger.prototype.isLevelEnabled,ConsoleLogger.prototype.isDebugEnabled=Logger.prototype.isDebugEnabled,ConsoleLogger.prototype.isVerboseEnabled=Logger.prototype.isVerboseEnabled,ConsoleLogger.prototype.isInfoEnabled=Logger.prototype.isInfoEnabled,ConsoleLogger.prototype.isWarnEnabled=Logger.prototype.isWarnEnabled,ConsoleLogger.prototype.isErrorEnabled=Logger.prototype.isErrorEnabled,ConsoleLogger.prototype.isFatalEnabled=Logger.prototype.isFatalEnabled}log(level,message,meta){this.levels[level]<=this.level&&this.console.log(this.formatter.format(new Date,this.category,level,message,meta))}debug(message,meta){this.levels[LoggerLevel.DEBUG]<=this.level&&this.console.debug(this.formatter.format(new Date,this.category,LoggerLevel.DEBUG,message,meta))}verbose(message,meta){this.levels[LoggerLevel.VERBOSE]<=this.level&&this.console.info(this.formatter.format(new Date,this.category,LoggerLevel.VERBOSE,message,meta))}info(message,meta){this.levels[LoggerLevel.INFO]<=this.level&&this.console.info(this.formatter.format(new Date,this.category,LoggerLevel.INFO,message,meta))}warn(message,meta){this.levels[LoggerLevel.WARN]<=this.level&&this.console.warn(this.formatter.format(new Date,this.category,LoggerLevel.WARN,message,meta))}error(message,meta){this.levels[LoggerLevel.ERROR]<=this.level&&this.console.error(this.formatter.format(new Date,this.category,LoggerLevel.ERROR,message,meta))}fatal(message,meta){this.levels[LoggerLevel.FATAL]<=this.level&&this.console.error(this.formatter.format(new Date,this.category,LoggerLevel.FATAL,message,meta))}}class LoggerCategoryCache{constructor(){this.cache={}}get(category){return this.cache[category]}put(category,level){this.cache[category]=level}}class PlainTextFormatter{format(timestamp,category,level,message,meta){return`${timestamp}:${category}:${level}:${message}${meta||""}`}}class LoggerFactory{static loggerCategoryCache=new LoggerCategoryCache;static getGlobalRef(){let $globalref=null;return $globalref=LoggerFactory.detectBrowser()?window:global,$globalref}static getGlobalRoot(key){const $globalref=LoggerFactory.getGlobalRef();let $key=$globalref&&$globalref.boot;return $key=$key&&$key.contexts,$key=$key&&$key.root,$key=$key&&$key[`${key}`],$key}static detectBrowser(){return!("undefined"==typeof window)}static detectConfig(configArg){let $config=null;if("undefined"!=typeof config&&($config=config),LoggerFactory.getGlobalRoot("config")&&($config=LoggerFactory.getGlobalRoot("config")),LoggerFactory.detectBrowser()&&window?.config&&($config=window.config),$config=configArg||$config,$config)return $config;throw new Error("Unable to detect config, is 'config' declared or provided?")}static detectLoggerFactory(){let $loggerFactory=null;return"undefined"!=typeof loggerFactory&&($loggerFactory=loggerFactory),"undefined"!=typeof global&&global?.boot?.contexts?.root?.loggerFactory&&($loggerFactory=global.boot.contexts.root.loggerFactory),LoggerFactory.detectBrowser()&&window?.loggerFactory&&($loggerFactory=window.loggerFactory),LoggerFactory.detectBrowser()&&window?.boot?.contexts?.root?.loggerFactory&&($loggerFactory=window.boot.contexts.root.loggerFactory),$loggerFactory}static getFormatter(configArg){let format="json";const $config=this.detectConfig(configArg);LoggerFactory.detectBrowser()&&(format="text"),$config.has("logging.format")&&(format=$config.get("logging.format"));return"text"===format.toLowerCase()?new PlainTextFormatter:new JSONFormatter}static getLogger(category,configArg,configPath,cache){const loggerFactory=this.detectLoggerFactory();if(loggerFactory)return loggerFactory.getLogger(category);const $configArg="object"==typeof category?category:configArg,$category="object"==typeof category?"":category;return new ConfigurableLogger(LoggerFactory.detectConfig($configArg),new ConsoleLogger($category,null,null,null,LoggerFactory.getFormatter($configArg),null),$category,configPath,cache||LoggerFactory.loggerCategoryCache)}constructor(config,cache,configPath){if(this.config=config,this.cache=cache,this.configPath=configPath||ConfigurableLogger.DEFAULT_CONFIG_PATH,!this.config)throw new Error("config is required");if(!this.cache)throw new Error("cache is required")}getLogger(categoryArg){const category="string"==typeof categoryArg?categoryArg:categoryArg&&categoryArg.qualifier||categoryArg&&categoryArg.name||categoryArg&&categoryArg.constructor&&categoryArg.constructor.name;return new ConfigurableLogger(this.config,new ConsoleLogger(category,null,null,null,this.getFormatter(),null),category,this.configPath,this.cache)}getFormatter(){let format="json";LoggerFactory.detectBrowser()&&(format="text"),this.config.has("logging.format")&&(format=this.config.get("logging.format"));return"text"===format.toLowerCase()?new PlainTextFormatter:new JSONFormatter}}export{ConfigurableLogger,ConsoleLogger,DelegatingLogger,JSONFormatter,Logger,LoggerCategoryCache,LoggerFactory,LoggerLevel,PlainTextFormatter};